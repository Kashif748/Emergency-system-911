# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
variables:
  IMG_NAME: slamah-fe
  PROJ_NAME: Slamah-FE
  SERVER: administrator@10.24.10.245
  TAG: $CI_PIPELINE_IID
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - autobot
  script:
    - docker build -t $IMG_NAME:$TAG .
    - echo "build docker image completed."



unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - autobot
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  tags:
    - autobot
  script:
    - echo "Linting code... This will take about 10 seconds."
    # - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: dev
  tags:
    - autobot
  script:
    - echo "Deploying application..."
    - docker save -o $IMG_NAME $IMG_NAME:$TAG
    - ssh $SERVER "mkdir ~/docker-images || true"
    - ssh $SERVER "mkdir ~/$PROJ_NAME || true"
    - scp $IMG_NAME $SERVER:~/docker-images/
    - scp docker-compose.yml $SERVER:~/$PROJ_NAME/
    - scp docker-compose.override.yml $SERVER:~/$PROJ_NAME/
    - ssh $SERVER "docker load -i ~/docker-images/$IMG_NAME"
    - ssh $SERVER "cd ~/$PROJ_NAME && docker compose up -d"
    - echo "Application successfully deployed."
